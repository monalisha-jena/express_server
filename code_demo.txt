const express = require('express');
const fs = require('fs');
const users = require('./MOCK_DATA.json');
const { error } = require('console');
const app = express();
const PORT = 3000;

//Middleware - Plugin
app.use(express.urlencoded({ extended: false})) //urlencoded takes the formdata from postman and put that in the body
//here express.urlencode(this format is the selected format in postman) is recognising which data is in urlencoded format and sending it to req.body

app.use((req, res, next) => {
    fs.appendFile("log.txt", `${Date.now()}: ${req.ip} ${req.method}: ${req.path}\n`, (err, data) => {
        next(); //helps to fetch all data from route (this is a irl example)
    });
})
// app.use((req, res, next) => {
//     console.log("Hello from Middleware 1"); //shows on console
//     // return res.json({msg: "Hello from middleware 1"}); //shows on postman
//     //but no next command to reach the to the route
//     req.myUserName = "monalisha_jena";
//     next(); //when u command next there shouldnt be any return otherwise user wont reach route
// })

// app.use((req, res, next) => {
//     console.log("Hello from middleware 2", req.myUserName);
//     return res.end("Hey"); //middleware 1 sends next command as we reach middleware 2 and get hey in postman

// })

//Routes REST APIs
app.get("/api/users", (req, res) => {
    //HEADERS 
    res.setHeader("X-myName", "Monalisha"); //X is added to represent custom headers this is shown in response headers in postman
    console.log(req.headers); //gets all the headers from request headers in Postman.com
    // console.log("I am in GET route", req.myUserName);
    return res.json(users);
});

app.get("/api/users/:id",(req, res) =>{
    const id = Number(req.params.id); //we have to  convert the string into a number
    const user = users.find((user) => user.id === id);
    if(!user){
        return res.status(404).json({error: "user not found"}); //invalid user or invalid entry from client side gives error 404
    }
    return res.json(user);
});

// app.post("/api/users", (req, res) => {
//     const body = req.body;
//     console.log('Body', body); //user info is displayed in the console
//     return res.json({status: "pending"}) //browser takes get request by default so post, patch, delete cant be performed 
// })

app.post("/api/users", (req, res) => {
    const body = req.body;
    if(!body || !body.first_name || !body.last_name || !body.email || !body.gender || !body.city){
        return res.status(400).json({msg: "All fields are required"}); //400 shows bad request
    }
    users.push({...body, id: users.length + 1});
    fs.writeFile('./MOCK_DATA.json', JSON.stringify(users), (err, data) => {
        return res.status(201).json({status: "success", id: users.length}) 
    })
    // return res.json({status: "pending"}) 
})

app.patch("/api/users/:id", (req, res) => {
    return res.json({status: "pending"})
})

app.delete("/api/users/:id", (req, res) => { //this code is not working
    const id = Number(req.params.id);
    const user = users.find((user) => user.id === id);
    users.splice(id, 1);
    res.status(200).json({status: "success", message: `User with ID ${id} deleted succesfully.`});
})

//OTHER WAY:
//we took the common parameter and got the result for all http methods
// app.route("/api/users/:id").get((req, res) =>{
//     const id = Number(req.params.id); //we have to  convert the string into a number
//     const user = users.find((user) => user.id === id);
//     return res.json(user);})
//     .put((req, res) =>{})
//     .post((req, res) => {})
//     .patch((req, res) => {})
//     .delete((req, res) => {})

app.listen(PORT, () => {console.log(`Server is running on port ${PORT}`)})