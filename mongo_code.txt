// INTERACTING WITH MONGODB AND CRUD OPERATIONS

const express = require('express');
const fs = require('fs');
const mongoose = require('mongoose');
const app = express();
const PORT = 3000;

//Connection
mongoose
.connect("mongodb://127.0.0.1:27017/project_01")
.then(() => console.log("MongoDB Connected"))
.catch((err) => console.log("Mongo Error", err))


//Schema
const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true,
    },
    lastName: {
        type: String,
    },
    email: {
        type: String,
        required: true,
        unique: true,
    },
    gender: {
        type: String,
    },
    city: {
        type: String,
    },
},
{timestamps: true} //updated and created at which time
);

const User = mongoose.model("user", userSchema);

//Middleware - Plugin
app.use(express.urlencoded({ extended: false})) 
app.use((req, res, next) => {
    fs.appendFile("log.txt", `${Date.now()}: ${req.ip} ${req.method}: ${req.path}\n`, (err, data) => {
        next(); 
    });
})


//Routes REST APIs
//html code
app.get("/users", async (req, res) => {
    const allDbUsers = await User.find({});
    const html = `
    <ul>
    ${allDbUsers
    .map((user) => `<li>${user.firstName} - ${user.email}</li>`)
    .join("")}
    </ul>
    `;
    res.send(html);
})

app.get("/api/users", async (req, res) => {
    const allDbUsers = await User.find({});
    return res.json(allDbUsers);
});

app.get("/api/users/:id",async (req, res) =>{
    const user = await User.findById(req.params.id); //this gives info about a partucular individual from the id generated by the DB
    if(!user){
        return res.status(404).json({error: "user not found"}); 
    }
    return res.json(user);
});



app.post("/api/users", async (req, res) => {
    const body = req.body;
    if(!body || !body.first_name || !body.last_name || !body.email || !body.gender || !body.city){
        return res.status(400).json({msg: "All fields are required"}); 
    }
    const result =  await User.create({
        firstName: body.first_name, 
        lastName: body.last_name, 
        email: body.email, 
        gender: body.gender, 
        city: body.city,
    })

    return res.status(201).json({msg: "success"});
})

app.patch("/api/users/:id", async (req, res) => {
    await User.findByIdAndUpdate(req.params.id, {lastName: "Changed"});
    return res.json({status: "success"})
})

app.delete("/api/users/:id", async (req, res) => { 
    await User.findByIdAndDelete(req.params.id);
    return res.json({status: "success"});
})

app.listen(PORT, () => {console.log(`Server is running on port ${PORT}`)})